//二叉查找树即是根节点大于左孩子小于右孩子，因此有如下递归
class Solution {
public:
    bool isValidBST(TreeNode* root) {
    return isValidBST(root, NULL, NULL);
}

bool isValidBST(TreeNode* root, TreeNode* minNode, TreeNode* maxNode) {
    if(!root) return true;
    if(minNode && root->val <= minNode->val || maxNode && root->val >= maxNode->val)
        return false;
    return isValidBST(root->left, minNode, root) && isValidBST(root->right, root, maxNode);
    
}
};
//或者保证中序遍历有序
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        TreeNode* pre=NULL;
        return inorder(root,pre);
    }
    bool inorder(TreeNode* root, TreeNode *&pre){
        if(root==NULL)return true;
        if(!inorder(root->left,pre))
            return false;
        if(pre!=NULL&&pre->val>=root->val)
            return false;
        pre=root;
        return inorder(root->right,pre);
    }
};
