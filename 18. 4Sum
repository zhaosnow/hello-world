//O(n^3)
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<vector<int>>v;
        int n=nums.size();
        for(int i=0;i<n-3;i++){
            if(i&&nums[i]==nums[i-1])continue;
            for(int j=i+1;j<n-2;j++){
                if(j!=i+1&&nums[j]==nums[j-1])continue;
                int k=j+1,l=n-1;
                while(k<l){
                    int temp=nums[i]+nums[j]+nums[k]+nums[l];
                    if(temp==target){
                        v.push_back({nums[i],nums[j],nums[k],nums[l]});
                        while(k<l&&nums[k+1]==nums[k])k++;
                        while(k<l&&nums[l]==nums[l-1])l--;
                        k++;l--;
                    }
                    else if(temp<target){
                       // while(k<l&&nums[k+1]==nums[k])k++;
                        k++;
                    }else{
                      //  while(k<l&&nums[l]==nums[l-1])l--;
                        l--;
                    }
                }
            }
        }
        return v;
    }
};
//O(n^3)
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<vector<int>>v;
        int n=nums.size();
        for(int i=0;i<n-3;i++){
            if(i&&nums[i]==nums[i-1])continue;
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target)break;//优化之后速度可快10倍
            if(nums[i]+nums[n-1]+nums[n-2]+nums[n-3]<target)continue;
            for(int j=i+1;j<n-2;j++){
                if(j!=i+1&&nums[j]==nums[j-1])continue;
                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target)break;
                if(nums[i]+nums[j]+nums[n-2]+nums[n-1]<target)continue;
                int k=j+1,l=n-1;
                while(k<l){
                    int temp=nums[i]+nums[j]+nums[k]+nums[l];
                    if(temp==target){
                        v.push_back({nums[i],nums[j],nums[k],nums[l]});
                        while(k<l&&nums[k+1]==nums[k])k++;
                        while(k<l&&nums[l]==nums[l-1])l--;
                        k++;l--;
                    }
                    else if(temp<target){
                       // while(k<l&&nums[k+1]==nums[k])k++;
                        k++;
                    }else{
                      //  while(k<l&&nums[l]==nums[l-1])l--;
                        l--;
                    }
                }
            }
        }
        return v;
    }
};
//
class Solution {
public:
     vector<vector<int> > fourSum(vector<int> &num, int target){
        vector<vector<int> > vvi;
        int n = num.size();
        if(n < 4) return  vvi;

        sort(num.begin(), num.end());        
        unordered_map<int, vector<pair<int, int>> > mp;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                mp[num[i]+num[j]].push_back(make_pair(i,j));
            }
        }

        for(int i = 0; i < n; i++){
            if(i>0 && num[i] == num[i-1]) continue;
            for(int j = i + 1; j < n; j++){
                if(j > i + 1 && num[j] == num[j-1]) continue;
                int res = target - num[i] - num[j];
                if(mp.count(res)){
                    for(auto it = mp[res].begin(); it != mp[res].end(); it++){
                        int k = (*it).first, l = (*it).second;
                        if(k > j){ // k>j make sure that the second pair has bigger values than the first pair.
                            if(!vvi.empty() && num[i]==vvi.back()[0] && num[j]==vvi.back()[1]
                            && num[k]==vvi.back()[2] && num[l] == vvi.back()[3]){
                                continue; //if the obtained 4 elements are the same as previous one continue to next
                            }
                            vector<int> vi={num[i], num[j], num[k], num[l]};
                            vvi.push_back(vi);
                        } // if k>j

                    }//for it
                }//if
            }// forj
        }//for i
        return vvi;
    }
};
