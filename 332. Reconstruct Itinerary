//常规dfs，遍历所有路径的做法
class Solution {
public:
    vector<string> findItinerary(vector<pair<string, string>> tickets) {
        int m=tickets.size();
        map<string, vector<string>>p;
        map<string, vector<string>>::iterator lt;
        for(int i=0;i<tickets.size();i++){
            p[tickets[i].first].push_back(tickets[i].second);
        }
        for(lt=p.begin();lt!=p.end();lt++)
            sort(lt->second.begin(),lt->second.end());
        res.push_back("JFK");
        dfs(p,m+1,"JFK");
        return v;
    }
    void dfs(map<string,vector<string>>p,int m,string start){
        if(res.size()==m){
            v=res;
           // v.push_back(start);
            return ;
        }
        if(v.size()>0)return ;
        for(int i=0;i<p[start].size();i++){
            string s=p[start][i];
            res.push_back(s);
            p[start].erase(p[start].begin()+i);
            dfs(p,m,s);
            p[start].insert(p[start].begin()+i,s);
            res.pop_back();
        }
    }
private: vector<string>res,v;
};
//实际上这道题是变相的拓扑排序，因为终点肯定是最后一个被访问的节点，以此类推。所以只需按拓扑排序输出即可。
class Solution {
public:
    vector<string> findItinerary(vector<pair<string, string>> tickets) {
        unordered_map<string, multiset<string>> m;
        vector<string> res;
        if (tickets.size() <= 0) {
            return res;
        }
        for (pair<string, string> p: tickets) {
            m[p.first].insert(p.second);
        }
        stack<string> s;
        s.push("JFK");
        while(s.size()){
            string str=s.top();//s.pop();
            while(m[str].size()){
                s.push(*m[str].begin());
                m[str].erase(m[str].begin());
                str=s.top();
            }
            res.push_back(s.top());s.pop();
        }
        reverse(res.begin(),res.end());
        return res;
    }
};
//dfs
class Solution {
public:
    vector<string> findItinerary(vector<pair<string, string>> tickets) {
     vector<string> res;
        unordered_map<string, multiset<string> > m;
        for (auto a : tickets) {
            m[a.first].insert(a.second);
        }
        dfs(m, "JFK", res);
        reverse(res.begin(),res.end());
        return res;
    }
    void dfs(unordered_map<string, multiset<string> > &m, string s, vector<string> &res) {
        while (m[s].size()) {
            string t = *m[s].begin();
            m[s].erase(m[s].begin());
            dfs(m, t, res);
        }
        res.push_back(s);
    }
};
