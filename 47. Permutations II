class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        dfs(nums,0);
        return v;
    }
    void dfs(vector<int>nums,int start){
        if(start==nums.size()-1){
            v.push_back(nums);
            return;
        }
        for(int i=start;i<nums.size();i++){
            if(i!=start&&nums[i]==nums[start])
                continue;
            swap(nums[start],nums[i]);
            dfs(nums,start+1);
            //swap(nums[start],nums[i]);
            //如果数组中的数全都不同时，需要交换回去，而当有重复的时候不需要交换例如：
            //[0,0,2,2]交换回来时返回[[0,0,2,2],[0,2,0,2],[0,2,2,0],[0,2,2,0],[0,2,0,2],[2,0,0,2],[2,0,2,0],
            //[2,2,0,0],[2,0,2,0],[2,0,0,2],[2,2,0,0]]
        }
    }
private: vector<vector<int>>v;
};
