//就是一个模拟算法
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        unordered_map<string,int>p;
        int wdlen=words[0].size(),wdslen=words.size();
        int start,cur,len=s.size(),cnt;
        vector<int>res;
        for(int i=0;i<words.size();i++){
            p[words[i]]++;
        }
        for(int i=0;i<wdlen;i++){
            cur=start=i;cnt=wdslen;
            while(start<=len-wdlen*wdslen){
                string str=s.substr(cur,wdlen);
                if(p.find(str)==p.end()){
                    for(cnt=wdslen;start!=cur;start+=wdlen)
                        p[s.substr(start,wdlen)]++;
                    start+=wdlen;
                }else if(p[str]==0){
                    for(;s.substr(start,wdlen)!=str;start+=wdlen)
                        p[s.substr(start,wdlen)]++,cnt++;
                    start+=wdlen;
                }else{
                    p[str]--;cnt--;
                    if(cnt==0){
                       res.push_back(start);
                       p[s.substr(start,wdlen)]++;
                       cnt++;
                       start+=wdlen;
                    }
                }
                cur+=wdlen;
            }
            for(;start!=cur;start+=wdlen)
                p[s.substr(start,wdlen)]++;
        }
        return res;
    }
};
