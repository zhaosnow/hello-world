//递归优化
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int cur=0;
        int len=(preorder.size())-1;
        map<int,int>p;
        for(int i=0;i<=len;i++)
            p[inorder[i]]=i;
        return create(preorder,inorder,cur,0,len,p);
    }
    TreeNode* create(vector<int>& preorder,vector<int>& inorder,int &cur,int left,int right,map<int,int>&p){
        if(left>right)
            return NULL;
        TreeNode* root=new TreeNode(preorder[cur++]);
        root->left=create(preorder,inorder,cur,left,p[root->val]-1,p);
        root->right=create(preorder,inorder,cur,p[root->val]+1,right,p);
        return root;
    }
};
//递归
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int cur=0;
        int len=(preorder.size())-1;
        return create(preorder,inorder,cur,0,len);
    }
    TreeNode* create(vector<int>& preorder,vector<int>& inorder,int &cur,int left,int right){
        if(left>right)
            return NULL;
        int i;
        for(i=left;i<=right;i++){
            if(preorder[cur]==inorder[i])
                break;
        }
        TreeNode* root=new TreeNode(preorder[cur++]);
        root->left=create(preorder,inorder,cur,left,i-1);
        root->right=create(preorder,inorder,cur,i+1,right);
        return root;
    }
};
//非递归
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        stack<TreeNode *>s;
        int len=preorder.size(),start=0,instart=0;
        
        if(!len)
            return NULL;
        
        TreeNode *root=new TreeNode(preorder[start++]);
        s.push(root);
        TreeNode *p;
        while(start<len)
        {
            if(inorder[instart]==s.top()->val)
            {
                p=s.top();
                s.pop();
                instart++;
                if(instart==len)
                    break;
                if(!s.empty()&&inorder[instart]==s.top()->val)
                    continue;  
                p->right=new TreeNode(preorder[start++]);
                s.push(p->right);
            }
            else
            {
                p=new TreeNode(preorder[start++]);
                s.top()->left=p;
                s.push(p);
            }
        }
        return root;
    }
};
