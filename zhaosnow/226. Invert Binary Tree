//递归和非递归算法
//非递归
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        stack<TreeNode*>t;
        t.push(root);
        while(!t.empty()){
            TreeNode *tmp=t.top();
            t.pop();
            if(tmp!=NULL)
            {
                TreeNode* l=tmp->left;
                tmp->left=tmp->right;
                tmp->right=l;
                t.push(tmp->left);
                t.push(tmp->right);
            }
        }
        return root;
    }
};
//递归
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root == NULL)
            return NULL;
        invertTree(root->left);
        invertTree(root->right);
        TreeNode* p = root->left;
        root->left = root->right;
        root->right = p;
        return root;
    }
};
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root == NULL)
            return NULL;
        TreeNode* p = root->left;
        root->left = root->right;
        root->right = p;
        invertTree(root->left);
        invertTree(root->right);
        return root;
    }
};
