//非递归做法
class Solution {
public:
    void flatten(TreeNode* root) {
        TreeNode* cur=root,*pre;
        while(cur!=NULL){
            if(cur->left!=NULL){//每次把根节点左孩子的最右节点指向根节点的右节点，根节点指向左孩子
                pre=cur->left;
            while(pre->right!=NULL)pre=pre->right;
            pre->right=cur->right;
            cur->right=cur->left;
            cur->left=NULL;
            }
            cur=cur->right;
        }
    }
};
//递归做法后续遍历的改版
class Solution {
public:
    void flatten(TreeNode* root) {
        if(root==NULL)return ;
        flatten(root->right);
        flatten(root->left);
        if(p!=NULL){
            root->right=p;
            root->left=NULL;
        }
        p=root;
    }
private:TreeNode* p;
};
//先序遍历
class Solution {
public:
    void helper(TreeNode *root, TreeNode *&pre) {
        if (root == NULL) return;
        if (pre != NULL) {
            pre->left = NULL;
            pre->right = root;
        }
        pre = root;
        TreeNode *left = root->left;
        TreeNode *right = root->right;
        if (left != NULL) {
            helper(left, pre);
        }
        if (right != NULL) {
            helper(right, pre);
        }
    }
    void flatten(TreeNode *root) {
        TreeNode *pre = NULL;
        helper(root, pre);
    }
};
