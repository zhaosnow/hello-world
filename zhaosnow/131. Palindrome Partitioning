//递归
class Solution {
public:
    vector<vector<string>> partition(string s) {
        int len=s.size();
        dfs(s,0,len);
        return v;
    }
    void dfs(string &s,int start,int &len){
        if(start==len){
            v.push_back(tmp);
            return ;
        }
        for(int i=start;i<len;i++){
            string temp=s.substr(start,i-start+1);
            if(ispalindrome(temp)){
                tmp.push_back(temp);
                dfs(s,i+1,len);
                tmp.pop_back();
            }
        }
        /*可节约4毫秒
             for(int i=start;i<len;i++){
            if(ispalindrome(s,start,i)){
                tmp.push_back(s.substr(start,i-start+1));
                dfs(s,i+1,len);
                tmp.pop_back();
            }
        }
        */
    }
    bool ispalindrome(string temp){
        int j=temp.size()-1,i=0;
        while(i<j){
            if(temp[i++]!=temp[j--])
                return false;
        }
        return true;
    }
private: vector<vector<string>>v;vector<string>tmp;
};
//减少递归中的函数调用，可减少一半多的时间
class Solution {
public:
    vector<vector<string>> partition(string s) {
        int len=s.size();
        dfs(s,0,len);
        return v;
    }
    void dfs(string &s,int start,int &len){
        if(start==len){
            v.push_back(tmp);
            return ;
        }
        for(int i=start;i<len;i++){
            int l=start,r=i;
            while(l<r&&s[l]==s[r])l++,r--;
            if(l>=r){
                tmp.push_back(s.substr(start,i-start+1));
                dfs(s,i+1,len);
                tmp.pop_back();
            }
        }
    }
private: vector<vector<string>>v;vector<string>tmp;
};
//dp+dfs明显有点不如直接dfs
class Solution {
public:
    vector<vector<string>> partition(string s) {
        int len=s.size();
        if(len<1)return v;
        array.resize(len,vector<bool>(len,0));
        for(int i=len-1;i>=0;i--)
            for(int j=i;j<len;j++){
                array[i][j]=s[i]==s[j]&&(j-i<2||array[i+1][j-1]);
            }
        dfs(0,len,s);
        return v;
    }
    void dfs(int start,int &end,string &s){
        if(start==end){
            v.push_back(tmp);
            return ;
        }
        for(int i=start;i<end;i++){
            if(array[start][i]){
                tmp.push_back(s.substr(start,i-start+1));
                dfs(i+1,end,s);
                tmp.pop_back();
            }
        }
    }
private: vector<vector<string>>v;vector<vector<bool>>array;vector<string>tmp;
};
//最优代码
class Solution {
private:
    void Find(string s, bool *dp, int n, int start, vector<string> &vstr, vector<vector<string>> &ret)
    {
        for(int i = start; i < n; i ++)
        {
            if(dp[start*n+i])
            {
                vstr.push_back(s.substr(start, i-start+1));
                if(i == n-1)
                {
                    ret.push_back(vstr);
                }
                else
                {
                    Find(s, dp, n, i+1, vstr, ret);
                }
                vstr.pop_back();
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        int n = s.size();
        vector<vector<string>> ret;
        if(n == 0)return ret;
        bool *dp = new bool[n*n];
        for(int i = 0; i < n*n; i ++)
            dp[i] = false;
        dp[0] = true;
        for(int i = 1; i < n; i ++)
        {
            dp[i*n+i] = true;
            if(s[i] == s[i-1])
                dp[(i-1)*n+i] = true;
        }
        for(int i = 2; i < n; i ++)
        {
            for(int j = 0; j+i < n; j ++)
            {
                if(s[j] == s[j+i] && dp[(j+1)*n+j+i-1])
                    dp[j*n+j+i] = true;
            }
        }
        vector<string> vstr;
        Find(s, dp, n, 0, vstr, ret);
        return ret;
    }
};
