//如果直接dfs的话，分支太多。如果dp之后，再找路径，则需要O（N^2)的空间才可以优化时间，所以可以倒着减支，如果从i开始到末尾已经不可能形成
//字符串组，那么则减支。所以可是使用倒着递归来优化。
class Solution {
public:
    vector<string> wordBreak(string s, unordered_set<string>& wordDict) {
        bool dp[s.size()+1];
        memset(dp,0,sizeof(dp));
        dp[s.size()]=true;
        for(int i=s.size()-1;i>=0;i--){
            for(int j=i;j<s.size();j++){
                if(dp[j+1]&&wordDict.find(s.substr(i,j-i+1))!=wordDict.end()){
                    dp[i]=true;   
                }
            }
        }
        dfs(s,wordDict,"",0,dp);
        return v;
    }
private: void dfs(string s,unordered_set<string>& wordDict,string tmp,int i,bool dp[]){
    if(i==s.size()){
        v.push_back(tmp.substr(1));
        return ;
    }
    if(!dp[i])return ;
    for(int j=i;j<s.size();j++){
        string str=s.substr(i,j-i+1);
        if(wordDict.find(str)!=wordDict.end()){
            dfs(s,wordDict,tmp+" "+str,j+1,dp);
        }
    }
}
private: vector<string>v;
};
