//很明显是一道dp题，正着dp，明显速度要慢一些
class Solution {
public:
    bool wordBreak(string s, unordered_set<string>& wordDict) {
        bool dp[s.size()+1];
        memset(dp,0,sizeof(dp));
        dp[0]=true;
        for(int i=1;i<=s.size();i++){
            for(int j=0;j<i;j++){
                if(dp[j]&&wordDict.find(s.substr(j,i-j))!=wordDict.end()){
                    dp[i]=true;break;
                }
            }
        }
        return dp[s.size()];
    }
};
//倒着dp，速度更快
class Solution {
public:
    bool wordBreak(string s, unordered_set<string>& wordDict) {
        bool dp[s.size()+1];
        memset(dp,0,sizeof(dp));
        dp[s.size()]=true;
        for(int i=s.size()-1;i>=0;i--){
            for(int j=i;j<s.size();j++){
                if(dp[j+1]&&wordDict.find(s.substr(i,j-i+1))!=wordDict.end()){
                    dp[i]=true;   
                }
            }
        }
        return dp[0];
    }
};
//dfs加减支，明显速度更快
class Solution {
public:
    bool wordBreak(string s, unordered_set<string>& wordDict) {
        vector<bool>visit(s.size()+1,0);
        return wb(s,s.size(),visit,wordDict);
    }
    bool wb(string s,int pos,vector<bool>&visit,unordered_set<string>&wordDict){
        if(pos==0)return true;
        visit[pos]=true;
        for(int i=pos;i>=0;i--){
            if(!visit[i]&&wordDict.find(s.substr(i,pos-i))!=wordDict.end()&&wb(s,i,visit,wordDict))
                return true;
        }
        return false;
    }
};
