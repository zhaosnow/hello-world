//递归解法
class Solution {
public:
    ListNode *p;
    bool isPalindrome(ListNode* head) {
        p=head;
       return ischeck(head);
    }
    bool ischeck(ListNode* q){
        if(q==NULL)
            return true;
        bool flag=ischeck(q->next);
        if(q->val!=p->val)return false;
        p=p->next;
        return flag;
    }
};
//非递归
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL||head->next==NULL)return true;
        int len=getlen(head);
        ListNode* p=head,*q,*new_head;
        new_head=new ListNode(-1);
        int cnt=len/2;
        for(int i=0;i<cnt;i++){
            q=new ListNode(p->val);
            q->next=new_head->next;
            new_head->next=q;
            p=p->next;
        }q=new_head->next;
        if(len%2!=0)p=p->next;
        while(p!=NULL){
            if(p->val!=q->val)
                return false;
            p=p->next;q=q->next;
        }
        delete(new_head);
        return true;
    }
    int getlen(ListNode* head){
        int count=0;
        while(head!=NULL){
            head=head->next;
            count++;
        }
        return count;
    }
};
