//使用set方法lower_bound，upper_bound，对于有序的set来说，复杂度为logN，所以总得复杂度为nlogn
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        multiset<long long> bst;
        for (int i = 0; i < nums.size(); ++i) {
            if (bst.size() == k + 1) bst.erase(bst.find(nums[i - k - 1]));
            auto lb = bst.lower_bound(nums[i]);
            if (lb != bst.end() && abs(*lb - nums[i]) <= t) return true;
            auto ub = bst.upper_bound(nums[i]);
            if (ub != bst.begin() && abs(*(--ub) - nums[i]) <= t) return true;
            bst.insert(nums[i]);
        }
        return false;
    }
};
//因为nums[i]-nums[j]<=t,所以则有nums[i]/t-nums[j]/t<=1,因此这样存储可以节省大量空间
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        unordered_map<long,long>p;
        for(int i=0;i<nums.size();i++){
            if(i>k)p.erase(nums[i-k-1]/max(1,t));
            int tmp=nums[i]/max(1,t);
            if((p.find(tmp)!=p.end()&&abs(p[tmp]-nums[i])<=t)||(p.find(tmp+1)!=p.end()
            &&abs(p[tmp+1]-nums[i])<=t)||(p.find(tmp-1)!=p.end()&&abs(p[tmp-1]-nums[i])<=t))
                return true;
            p[tmp]=nums[i];
            
        }
        return false;
    }
};
