//递归
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int>p;//是查找时间变为logN
        int cur=postorder.size()-1;
        for(int i=0;i<inorder.size();i++){
            p[inorder[i]]=i;
        }
        return build(inorder,postorder,0,cur,cur,p);
    }
    TreeNode* build(vector<int>& inorder,vector<int>& postorder,int left,int right,int &cur,map<int,int>& p){
        if(left>right)return NULL;
        TreeNode* root=new TreeNode(postorder[cur--]);
        root->right=build(inorder,postorder,p[root->val]+1,right,cur,p);
        root->left=build(inorder,postorder,left,p[root->val]-1,cur,p);
        return root;
    }
};
//非递归
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size()<1)return NULL;
        int n=inorder.size();
        stack<TreeNode*>s;
        int cur=n-1,post=n-1;
        TreeNode* root=new TreeNode(postorder[post--]);
        s.push(root);
        while(cur>=0){
            if(s.top()->val==inorder[cur]){
                TreeNode* p=s.top();
                s.pop();cur--;
                if(cur<0)break;
                if(!s.empty()&&s.top()->val==inorder[cur])
                    continue;
                p->left=new TreeNode(postorder[post--]);
                s.push(p->left);
            }else{
                TreeNode* p=new TreeNode(postorder[post--]);
                s.top()->right=p;
                s.push(p);
            }
        }
        return root;
    }
};
